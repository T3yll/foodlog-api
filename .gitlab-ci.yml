# 🧪 Pipeline GitLab - Tests FoodItems + Sécurité & Qualité

stages:
  - quality
  - test

# ========================================
# 📦 CACHE DES DÉPENDANCES
# ========================================
cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - node_modules/

# ========================================
# 🛡️ SÉCURITÉ & QUALITÉ DE CODE
# ========================================
security-and-quality:
  stage: quality
  image: node:20-alpine
  before_script:
    - npm ci
    # Installer les dépendances ESLint v9 si manquantes
    - npm install --save-dev @eslint/eslintrc @eslint/js 2>/dev/null || true
  script:
    # 🔍 Audit de sécurité des dépendances
    - echo "🔍 Audit de sécurité npm..."
    - npm audit --audit-level moderate
    
    # 📏 Vérification du formatage
    - echo "📏 Vérification du formatage..."
    - npx prettier --check "src/**/*.ts" "test/**/*.ts" || echo "⚠️ Formatage à corriger"
    
    # 🧹 Linting et qualité de code
    - echo "🧹 Analyse ESLint..."
    - npx eslint "src/**/*.ts" --format json --output-file eslint-report.json || echo "⚠️ Rapport ESLint généré avec warnings"
    - npx eslint "src/**/*.ts" || echo "⚠️ Problèmes ESLint détectés"
    
    # 🔒 Recherche de secrets/credentials dans le code (Alpine compatible)
    - echo "🔒 Recherche de secrets..."
    - |
      echo "Scanning for potential secrets..."
      find . -name "*.ts" -o -name "*.js" -o -name "*.json" | grep -v node_modules | \
        xargs grep -i "password\|secret\|token\|api_key\|private" || echo "✅ Aucun secret détecté"
    
    # 📊 Métriques de qualité (complexité, duplication)
    - echo "📊 Analyse de la complexité..."
    - npx madge --circular src/ || echo "⚠️ Dépendances circulaires détectées"
    
    # 📈 Rapport de qualité
    - echo "📈 Génération du rapport de qualité..."
    - |
      echo "=== RAPPORT DE QUALITÉ ==="
      echo "Files analysés: $(find src -name "*.ts" | wc -l)"
      echo "Tests: $(find src -name "*.spec.ts" | wc -l)"
      echo "Lignes de code: $(find src -name "*.ts" ! -name "*.spec.ts" -exec cat {} \; | wc -l)"
      echo "========================="
      
  artifacts:
    when: always
    reports:
      junit: eslint-report.json
    paths:
      - eslint-report.json
    expire_in: 1 week
  allow_failure: true  # Ne pas bloquer si problèmes de qualité
  only:
    - master
    - develop

# ========================================
# 🧪 TESTS FOOD-ITEMS
# ========================================
test-food-items:
  stage: test
  image: node:20-alpine
  services:
    - name: postgres:13
      alias: postgres
  variables:
    # Variables PostgreSQL
    POSTGRES_DB: foodlog_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: test_password
    # Variables de l'app
    NODE_ENV: test
    DB_HOST: postgres
    DB_PORT: 5432
    DB_USERNAME: postgres
    DB_PASSWORD: test_password
    DB_NAME: foodlog_test
    JWT_SECRET: test-jwt-secret-for-ci-must-be-32-chars-long
  before_script:
    # Installer PostgreSQL client
    - apk add --no-cache postgresql-client
    # Installer les dépendances
    - npm ci
    # Attendre PostgreSQL
    - until pg_isready -h postgres -p 5432 -U postgres; do sleep 2; done
    - sleep 3
  script:
    # Lancer uniquement les tests food-items avec coverage
    - npm run test food-items -- --coverage --watchAll=false
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    when: always
    paths:
      - coverage/
    expire_in: 1 week
  only:
    - master
    - develop